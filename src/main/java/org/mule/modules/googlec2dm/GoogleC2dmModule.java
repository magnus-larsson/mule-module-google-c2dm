/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.googlec2dm;

import org.mule.api.annotations.Module;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.modules.googlec2dm.server.mule.C2dmConnector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generic module
 *
 * @author MuleSoft, Inc.
 */
@Module(name="googlec2dm", schemaVersion="1.0.0-SNAPSHOT")
public class GoogleC2dmModule
{

	private static Logger logger = LoggerFactory.getLogger(GoogleC2dmModule.class);

	C2dmConnector connector = null;

	/**
     * Configurable
     */
    @Configurable
    private String source;

    /**
     * Set property
     *
     * @param source The c2dm source
     */
    public void setSource(String source)
    {
    	logger.debug("SET SOURCE");
        this.source = source;
    }

	/**
     * Configurable
     */
    @Configurable
    private String username;

    /**
     * Set property
     *
     * @param username The c2dm username
     */
    public void setUsername(String username)
    {
    	logger.debug("SET username");
        this.username = username;
    }

	/**
     * Configurable
     */
    @Configurable
    private String password;

    /**
     * Set property
     *
     * @param password The c2dm password
     */
    public void setPassword(String password)
    {
    	logger.debug("SET password");
        this.password = password;
    }

	/**
     * Configurable
     */
    @Configurable
    @Optional 
    @Default("false")
    private boolean testMode;

    /**
     * Set property
     *
     * @param test True means that c2dm will not be called
     */
    public void setTestMode(boolean testMode)
    {
    	logger.debug("SET TEST MODE");
        this.testMode = testMode;
    }

    public GoogleC2dmModule () {
    	logger.debug("GoogleC2dmModule instance created, b1");
    }

    protected C2dmConnector getConnector() {
    	if (connector == null) {
    		logger.debug("Creates an C2dmConnector instance");    	
	    	connector = new C2dmConnector();
	    	connector.setSource(source);
	    	connector.setUsername(username);
	    	connector.setPassword(password);
    	}
    	return connector;
    }
    
    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/GoogleC2dm-connector.xml.sample googlec2dm:my-processor}
     *
     * @param registrationIds The ids of the Android device that shall receive the notification, sent as a comma separated string with no space
     * @param subject The subject
     * @param message The message
     */
    @Processor
    public void push(String registrationIds, String subject, String message)
    {
    	String[] regIdArr = (registrationIds == null || registrationIds.trim().length() == 0) ? new String[0] : registrationIds.split(",");

    	if (testMode) {
    		logger.debug("PUSH TEST FOR " + regIdArr.length + " ID's");
        	return;
        }

    	logger.debug("PUSH " + regIdArr.length + " ID's");
		for (String registrationId : regIdArr) {
	    	logger.debug("PUSH TO ID [{}]", registrationId);
          	getConnector().getPushService().push(registrationId, subject, message);
		}
    }
}